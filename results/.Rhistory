perm <- sample.int(n = ncol(train_data))
# Applica permutazione
train_data_p <- train_data[, perm, drop = FALSE]
valid_data_p <- valid_data[, perm, drop = FALSE]
test_data_p  <- test_data[,  perm, drop = FALSE]
# (Qui non servono DataLoader PyTorch; ci occupiamo solo di KDE)
# Fit KDE sul train permutato
set.seed(GLOBAL_SEED)
kde_model <- fit_kde_train(train_data_p)
# Valuta KDE sul test permutato
est_kde <- kde_est(test_data_p, kde_model)
# Metriche sul test
kde_rmse        <- evaluate_rmse(est_kde, true_density)
kde_rmse_med    <- evaluate_rmse_median(est_kde, true_density)
kde_ise         <- evaluate_ise(est_kde, true_density)
kde_ise_med     <- evaluate_ise_median(est_kde, true_density)
kde_rel_L1      <- evaluate_rel_L1(est_kde, true_density)
kde_rel_L1_med  <- evaluate_rel_L1_median(est_kde, true_density)
# Stampa riepilogo
cat("\n--- Riepilogo KDE su test set ---\n")
cat(sprintf("kde_rmse:       %.3e\n", kde_rmse))
cat(sprintf("kde_rmse_med:   %.3e\n", kde_rmse_med))
cat(sprintf("kde_ise:        %.3e\n", kde_ise))
cat(sprintf("kde_ise_med:    %.3e\n", kde_ise_med))
cat(sprintf("kde_rel_L1:     %.3e\n", kde_rel_L1))
cat(sprintf("kde_rel_L1_med: %.3e\n", kde_rel_L1_med))
# Prepara salvataggio su CSV
results_dir <- "results"
if (!dir.exists(results_dir)) dir.create(results_dir, recursive = TRUE)
results_path <- file.path(results_dir, "results_5_dim_mnvtnorm_5000.csv")
# Nota: se vuoi cambiare nome file oer coerenza con pipeline, adattalo qui
# Stringa permutazione come in Python: es. "0 3 1 2 ..."
# In R, perm è in 1-based; per stringa coerente con Python (0-based), sottrai 1
perm_zero_based <- perm - 1
perm_str <- paste(perm_zero_based, collapse = " ")
results <- data.frame(
seed        = GLOBAL_SEED,
perm        = perm_str,
kde_rmse    = kde_rmse,
# puoi includere anche la versione median se vuoi:
kde_rmse_med  = kde_rmse_med,
kde_ise     = kde_ise,
kde_ise_med = kde_ise_med,
kde_rel_L1  = kde_rel_L1,
kde_rel_L1_med = kde_rel_L1_med,
stringsAsFactors = FALSE
)
# Scrive su CSV, appende se esiste
if (file.exists(results_path)) {
# Non scrivere header in append
write.table(results, file = results_path, sep = ",",
row.names = FALSE, col.names = FALSE, append = TRUE)
} else {
write.table(results, file = results_path, sep = ",",
row.names = FALSE, col.names = TRUE)
message(sprintf("Risultati salvati in %s:", results_path))
print(results)
}
}
# Esegui la funzione main
main_kde_only()
library(readr)
results_5_dim_mnvtnorm_5000 <- read_csv("C:/Users/utente/OneDrive/Desktop/uni/tesi/nn_density_estimation/results/results_5_dim_mnvtnorm_5000.csv")
View(results_5_dim_mnvtnorm_5000)
results_5_dim_mnvtnorm_5000
res_mean <- apply(results_5_dim_mnvtnorm_5000[,-c(1:2)],2,mean)
res_mean
glimpse(results_5_dim_mnvtnorm_5000)
glimpse(results_5_dim_mnvtnorm_5000)
library(tidyverse)
library(tidyverse)
glimpse(results_5_dim_mnvtnorm_5000)
results_5_dim_mnvtnorm_5000
res_mean <- apply(results_5_dim_mnvtnorm_5000[,-c(1:2)],2,mean)
res_mean
library(tidyverse)  # include ggplot2, tidyr, dplyr
# Esempio: leggi CSV con risultati
# Sostituisci "results.csv" col percorso reale
df <- results_5_dim_mnvtnorm_5000
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed, starts_with("gmm_rel_L1"), starts_with("kde_rel_L1"),
starts_with("rnade_rel_L1"), starts_with("realnvp_rel_L1")) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Confronto rel_L1 sui metodi",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
# Salva su file, es:
ggsave("boxplot_rel_L1_metodi.png", p, width = 8, height = 5, dpi = 300)
results_5_dim_mnvtnorm_5000
res_mean <- apply(results_5_dim_mnvtnorm_5000[,-c(1:2)],2,mean)
res_mean
library(tidyverse)  # include ggplot2, tidyr, dplyr
# Esempio: leggi CSV con risultati
# Sostituisci "results.csv" col percorso reale
df <- results_5_dim_mnvtnorm_5000
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed, starts_with("gmm_rel_L1"), starts_with("kde_rel_L1"),
starts_with("rnade_rel_L1"), starts_with("realnvp_rel_L1")) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
print(res_mean)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Dataset 1, D = 5, N = 5000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario A, D = 5, N = 5000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario A, D = 5, N = 5000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario A; D = 5; N = 5000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
rm(list=ls())
library(readr)
results_5_dim_mnvtnorm_10000 <- read_csv("C:/Users/utente/OneDrive/Desktop/uni/tesi/nn_density_estimation/results/results_5_dim_mnvtnorm_10000.csv")
View(results_5_dim_mnvtnorm_10000)
# Esempio: leggi CSV con risultati
# Sostituisci "results.csv" col percorso reale
df <- results_5_dim_mnvtnorm_10000
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed, starts_with("gmm_rel_L1"), starts_with("kde_rel_L1"),
starts_with("rnade_rel_L1"), starts_with("realnvp_rel_L1")) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario A; D = 5; N = 10000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
library(readr)
results_20_dim_exp_10000 <- read_csv("C:/Users/utente/OneDrive/Desktop/uni/tesi/nn_density_estimation/results/results_20_dim_exp_10000.csv")
View(results_20_dim_exp_10000)
# Esempio: leggi CSV con risultati
# Sostituisci "results.csv" col percorso reale
df <- results_20_dim_exp_10000
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed, starts_with("gmm_rel_L1"), starts_with("kde_rel_L1"),
starts_with("rnade_rel_L1"), starts_with("realnvp_rel_L1")) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario B; D = 20; N = 10000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
df %>%
select(seed, starts_with("gmm_rel_L1"), starts_with("kde_rel_L1"),
starts_with("rnade_rel_L1"), starts_with("realnvp_rel_L1"))
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed,gmm_rel_L1,kde_rel_L1,
rnade_rel_L1,realnvp_rel_L1) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario B; D = 20; N = 10000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
# Rimuovi o ignora colonne non necessarie (es. perm) se vuoi
# Poi pivot longer su colonne rel_L1:
df_long <- df %>%
select(seed,gmm_rel_L1_median,kde_rel_L1_median,
rnade_rel_L1_median,realnvp_rel_L1_median) %>%
pivot_longer(
cols = -seed,
names_to = "method",
values_to = "rel_L1"
)
# Spesso i nomi sono 'gmm_rel_L1'; vogliamo pulire method in etichette più leggibili:
df_long <- df_long %>%
mutate(method = case_when(
str_detect(method, "^gmm") ~ "GMM",
str_detect(method, "^kde") ~ "KDE",
str_detect(method, "^rnade") ~ "RNADE",
str_detect(method, "^realnvp") ~ "RealNVP",
TRUE ~ method
))
library(ggplot2)
p <- ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# Se vuoi mostrare i punti, puoi aggiungere jitter:
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # se rel_L1 varia molto, scala log; rimuovi se non serve
scale_fill_brewer(palette = "Set2") +   # palette carina, cambia se vuoi
labs(
title = "Scenario B; D = 20; N = 10000",
x = "Metodo",
y = "Errore relativo L1",
fill = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 0, vjust = 0.5),
plot.title = element_text(hjust = 0.5)
)
# Mostra il plot
print(p)
df_5_dim_exp_5000   <- read.csv("results_5_dim_exp_5000.csv", stringsAsFactors = FALSE)
df_5_dim_mnvtnorm_5000  <- read.csv("results_5_dim_mnvtnorm_5000.csv", stringsAsFactors = FALSE)
df_5_dim_mnvtnorm_10000 <- read.csv("results_5_dim_mnvtnorm_10000.csv", stringsAsFactors = FALSE)
df_10_dim_exp_5000  <- read.csv("results_10_dim_exp_5000.csv", stringsAsFactors = FALSE)
df_10_dim_exp_10000 <- read.csv("results_10_dim_exp_10000.csv", stringsAsFactors = FALSE)
df_10_dim_mnvtnorm_5000  <- read.csv("results_10_dim_mnvtnorm_5000.csv", stringsAsFactors = FALSE)
df_10_dim_mnvtnorm_10000 <- read.csv("results_10_dim_mnvtnorm_10000.csv", stringsAsFactors = FALSE)
df_20_dim_exp_5000  <- read.csv("results_20_dim_exp_5000.csv", stringsAsFactors = FALSE)
setwd("C:\\Users\\utente\\OneDrive\\Desktop\\uni\\tesi\\nn_density_estimation\\results")
df_5_dim_exp_5000   <- read.csv("results_5_dim_exp_5000.csv", stringsAsFactors = FALSE)
df_5_dim_exp_10000  <- read.csv("results_5_dim_exp_10000.csv", stringsAsFactors = FALSE)
df_5_dim_mnvtnorm_5000  <- read.csv("results_5_dim_mnvtnorm_5000.csv", stringsAsFactors = FALSE)
df_5_dim_mnvtnorm_10000 <- read.csv("results_5_dim_mnvtnorm_10000.csv", stringsAsFactors = FALSE)
df_10_dim_exp_5000  <- read.csv("results_10_dim_exp_5000.csv", stringsAsFactors = FALSE)
df_10_dim_exp_10000 <- read.csv("results_10_dim_exp_10000.csv", stringsAsFactors = FALSE)
df_10_dim_mnvtnorm_5000  <- read.csv("results_10_dim_mnvtnorm_5000.csv", stringsAsFactors = FALSE)
df_10_dim_mnvtnorm_10000 <- read.csv("results_10_dim_mnvtnorm_10000.csv", stringsAsFactors = FALSE)
df_20_dim_exp_5000  <- read.csv("results_20_dim_exp_5000.csv", stringsAsFactors = FALSE)
df_20_dim_exp_10000 <- read.csv("results_20_dim_exp_10000.csv", stringsAsFactors = FALSE)
df_20_dim_mnvtnorm_5000  <- read.csv("results_20_dim_mnvtnorm_5000.csv", stringsAsFactors = FALSE)
df_20_dim_mnvtnorm_10000 <- read.csv("results_20_dim_mnvtnorm_10000.csv", stringsAsFactors = FALSE)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
# 1) Pivot usando names_pattern per estrarre solo la parte “method”
df_long <- df %>%
select(seed,
gmm_rel_L1_median,
kde_rel_L1_median,
rnade_rel_L1_median,
realnvp_rel_L1_median) %>%
pivot_longer(
cols        = -seed,
names_to    = "method",
names_pattern = "(.*)_rel_L1_median",
values_to   = "rel_L1"
) %>%
# 2) Ricodifica in etichette leggibili
mutate(method = case_when(
method == "gmm"     ~ "GMM",
method == "kde"     ~ "KDE",
method == "rnade"   ~ "RNADE",
method == "realnvp" ~ "RealNVP",
TRUE                ~ method
))
# 3) Plot senza titolo e senza etichetta y
ggplot(df_long, aes(x = method, y = rel_L1, fill = method)) +
geom_boxplot(outlier.alpha = 0.5, width = 0.6) +
# geom_jitter(aes(color = method), width = 0.15, alpha = 0.3, show.legend = FALSE) +
scale_y_continuous(trans = "log10") +  # togli se non vuoi la scala log
scale_fill_brewer(palette = "Set2") +
labs(
x     = "Metodo",
y     = NULL,
title = NULL,
fill  = "Metodo"
) +
theme_minimal(base_size = 14) +
theme(
legend.position   = "right",
axis.text.x       = element_text(vjust = 0.5),
plot.title        = element_blank()
)
# Esempio: leggi CSV con risultati
# Sostituisci "results.csv" col percorso reale
df <- results_20_dim_exp_10000
# 1) Pivot usando names_pattern per estrarre solo la parte “method”
df_long <- df %>%
select(seed,
gmm_rel_L1_median,
kde_rel_L1_median,
rnade_rel_L1_median,
realnvp_rel_L1_median) %>%
pivot_longer(
cols        = -seed,
names_to    = "method",
names_pattern = "(.*)_rel_L1_median",
values_to   = "rel_L1"
) %>%
# 2) Ricodifica in etichette leggibili
mutate(method = case_when(
method == "gmm"     ~ "GMM",
method == "kde"     ~ "KDE",
method == "rnade"   ~ "RNADE",
method == "realnvp" ~ "RealNVP",
TRUE                ~ method
))
df_long
View(df_long)
